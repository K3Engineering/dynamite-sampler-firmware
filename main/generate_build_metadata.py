#!/usr/bin/env python
"""Generate build metadata in a C++ header format and output it on stdout.
"""
import sys
import subprocess
import time


# All logs / warnings should be on stderr
def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


# https://git-scm.com/docs/git-describe
# Use git describe for a unique firmware version:
# <latest tag>-<num commits from the tag>-<commit hash>-<dirty>
# --always: if there isn't a tag, use the git hash.
# --dirty: append -dirty if there are uncommited changes. Since the changes are not
# commited, the next best thing is to make it apparent that the firmware has been changed.
# --tags: use the non-annotated tags too, since github releases uses that.
git_cmd = ["git", "describe", "--always", "--dirty", "--tags"]
r = subprocess.run(git_cmd, capture_output=True)
git_describe = r.stdout.strip().decode("utf-8")

output = f"""/*
This file was autogenerated by main/generate_build_metadata.py at: {time.strftime("%Y-%m-%d %H:%M:%S")}
*/

#ifndef _BUILD_METADATA_H
#define _BUILD_METADATA_H

constexpr char GIT_DESCRIBE[] = "{git_describe}";
constexpr uint32_t BUILD_TIME = {int(time.time())};

#endif // _BUILD_METADATA_H"""

print(output)
